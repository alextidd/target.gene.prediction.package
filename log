[Previously saved workspace restored]

Loading required package: usethis
ℹ Loading target.gene.prediction.package
Joining, by = "ensg"
Joining, by = c("variant", "enst")
Joining, by = c("variant", "enst")
Joining, by = "TAD"
Joining, by = "enst"
Joining, by = "variant"
Joining, by = "variant"
Joining, by = "name"
Error: Problem with `mutate()` column `driver`.
ℹ `driver = symbol %in% drivers$symbol`.
✖ object 'drivers' not found
Backtrace:
     █
  1. ├─target.gene.prediction.package::predict_target_genes(...)
  2. │ └─target.gene.prediction.package::weight_and_score_manually(...) R/predict_target_genes.R:202:4
  3. │   └─`%>%`(...) R/weight_and_score_manually.R:22:2
  4. ├─base::lapply(...)
  5. │ └─target.gene.prediction.package:::FUN(X[[i]], ...)
  6. │   └─`%>%`(...) R/weight_and_score_manually.R:42:6
  7. ├─purrr::map(., ~dplyr::mutate(., model = i))
  8. ├─target.gene.prediction.package::get_PR(., txv_master, score)
  9. │ └─`%>%`(...) R/get_PR.R:15:2
 10. ├─tidyr::pivot_longer(...)
 11. ├─dplyr::mutate(., prediction = as.numeric(score >= median(score)))
 12. ├─dplyr::ungroup(.)
 13. ├─dplyr::mutate(., max = as.numeric(score == max(score)))
 14. ├─dplyr::group_by(., prediction_method, cs)
 15. ├─dplyr::filter(., score == max(score))
 16. ├─dplyr::group_by(., prediction_method, cs, symbol)
 17. ├─dplyr::mutate(., score = score %>% tidyr::replace_na(0))
 18. ├─tidyr::pivot_longer(...)
 19. ├─dplyr::distinct(.)
 20. ├─dplyr::select(., cs, symbol, ..., driver)
 21. ├─target.gene.prediction.package::get_testable(.)
 22. │ └─`%>%`(...) R/get_testable.R:2:2
 23. ├─dplyr::ungroup(.)
 24. ├─dplyr::filter(., any(driver == T))
 25. ├─dplyr::group_by(., cs)
 26. ├─dplyr::mutate(., driver = symbol %in% drivers$symbol)
 27. ├─dplyr:::mutate.data.frame(., driver = symbol %in% drivers$symbol)
 28. │ └─dplyr:::mutate_cols(.data, ..., caller_env = caller_env())
 29. │   ├─base::withCallingHandlers(...)
 30. │   └─mask$eval_all_mutate(quo)
 31. ├─symbol %in% drivers$symbol
 32. └─base::.handleSimpleError(...)
 33.   └─dplyr:::h(simpleError(msg, call))
Execution halted
